buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven {
            // Licenser
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.0'
    }
}


apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

group = project.group
version = project.version

minecraft {
    mappings channel: mapping, version: mappings_version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mixinexample {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mixinexample {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


mixin {
    add sourceSets.main, mixin_refmap
    defaultObfuscationEnv "searge"
}
sourceSets {
    main {
        ext.refMap = mixin_refmap
    }
}

repositories {
    maven {
        url "https://repo.spongepowered.org/maven"
    }
    mavenCentral()
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

shadowJar {
    configurations = [project.configurations.embed]
    classifier=""
    exclude "META-INF/versions/9/module-info.class"
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_ver}-${forge_ver}"
    compileOnly('org.spongepowered:mixin:0.8')
    compileOnly(fileTree(dir: 'lib', include: ['*.jar']))
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : "Drathonix",
                "Specification-Version"   : version, // We are version 1 of ourselves
                "Implementation-Title"    : modid,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "Drathonix",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': core_mod,
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
